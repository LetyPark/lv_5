// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Users {
  id        Int      @id @default(autoincrement()) @map("id")
  nickname  String   @unique @map("nickname")
  password  String   @map("password")
  userType  UserTypes   @default(CUSTOMER) @map("userType")

  customerOrder    CustomerOrders[]


  @@map("Users")
}

enum UserTypes{
  CUSTOMER
  OWNER
}

model Categories {
  id     Int    @id @default(autoincrement()) @map("id")
  name   String @map("name")
  order  Int    @map("order")
  deletedAt     DateTime?      @map("deletedAt") // 소프트 삭제를 위한 deletedAt 필드

  menus Menus[]
  
  @@map("Categories")
}

model Menus{
  id          Int    @id @default(autoincrement()) @map("id")
  name        String @map("name")
  description String @db.Text @map("description")
  image       String @map("image")
  price       Int    @map("price")
  order       Int    @map("order")
  status      Status @default(FOR_SALE) @map("status")
  deletedAt     DateTime?      @map("deletedAt") // 소프트 삭제를 위한 deletedAt 필드
  categoryId  Int    @map("categoryId")
  category    Categories @relation(fields: [categoryId], references: [id])

  customerOrder  CustomerOrders[]

  @@map("Menus")
}

enum Status{
  FOR_SALE
  SOLD_OUT
}

model CustomerOrders{
 id          Int    @id @default(autoincrement()) @map("id") 
 menuId      Int    @map("menuId")
 userId      Int    @map("userId")
 orderType   OrderType @default(PENDING) @map("ordertype")
 quantity    Int @map("quantity")
 createdAt   DateTime   @default(now()) @map("createdAt")
 deletedAt     DateTime?      @map("deletedAt") // 소프트 삭제를 위한 deletedAt 필드

 user        Users     @relation(fields: [userId], references: [id])
 menu        Menus @relation(fields : [menuId], references: [id])

  // totalPrice 필드는 실제 데이터베이스에 저장되지 않고 Prisma Client를 사용하여 계산됩니다.
  // Prisma Client에서 totalPrice를 가져올 때 필요한 경우 계산합니다.
  // 따라서 @map 어노테이션을 사용하지 않습니다.
  totalPrice  Int

@@map("CustomerOrders")
}

enum OrderType{
PENDING
ACCEPTED
CANCEL
}

